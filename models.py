from dataclasses import dataclass
from typing import List, Dict, Any
from telegram import ReplyKeyboardMarkup, KeyboardButton


class States:
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –±–æ—Ç–æ–º"""
    CHOOSING_LEVEL = 0
    CHOOSING_SURFACE = 1
    SHOWING_DETAILS = 2
    SHOWING_PHOTOS = 3


class Config:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"""
    MAX_RETRIES = 3
    RETRY_DELAY = 15
    MAX_PROMPT_LENGTH = 4000
    GPT_MODEL = "gpt-3.5-turbo"
    API_TIMEOUT = 30


class Messages:
    """–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞"""
    WELCOME = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º—è—á –¥–ª—è –≥–∞–Ω–¥–±–æ–ª–∞.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã:"
    SURFACE_QUESTION = "–û—Ç–ª–∏—á–Ω–æ! –ì–¥–µ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º—è—á?"
    SHOW_DETAILS = "–•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –º—è—á–∞—Ö?"
    SHOW_PHOTOS = "–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –º—è—á–µ–π?"
    ERROR_API = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    CANCELLED = "–í—ã–±–æ—Ä –º—è—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ /start"
    ERROR_TOO_LONG = "–ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è."
    ERROR_AUTH = "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    ERROR_TIMEOUT = "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    HELP = """
üèê –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:
/start - –ù–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä –º—è—á–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å

‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:
1. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã
2. –£–∫–∞–∂–∏—Ç–µ –≥–¥–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º—è—á
3. –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
4. –ò–∑—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –∏ —Ñ–æ—Ç–æ –º—è—á–µ–π
"""


class ImagePaths:
    """–ü—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –º—è—á–µ–π"""
    BASE_PATH = "images"

    # –ú—è—á–∏ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤ (—Ä–∞–∑–º–µ—Ä 0 –∏ 1)
    ERIMA_PURE_GRIP_4 = f"{BASE_PATH}/novice/erima_pure_grip_4.jpg"  # —Ä–∞–∑–º–µ—Ä 0
    MOLTEN_H0F1800 = f"{BASE_PATH}/novice/molten_h0f1800.jpg"  # —Ä–∞–∑–º–µ—Ä 0
    SELECT_TUCANA = f"{BASE_PATH}/novice/select_tucana.jpg"  # —Ä–∞–∑–º–µ—Ä 1

    # –ú—è—á–∏ –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è (—Ä–∞–∑–º–µ—Ä 1,2,3)
    SELECT_REPLICA_EHF = f"{BASE_PATH}/intermediate/select_replica_ehf.jpg"
    MOLTEN_SCHOOLMASTER = f"{BASE_PATH}/intermediate/molten_schoolmaster.jpg"
    ERIMA_VRANJES = f"{BASE_PATH}/intermediate/erima_vranjes.jpg"

    # –ú—è—á–∏ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤ (—Ä–∞–∑–º–µ—Ä 2 –∏ 3)
    ERIMA_PURE_GRIP_1 = f"{BASE_PATH}/professional/erima_pure_grip_1.jpg"
    MOLTEN_H3X5001 = f"{BASE_PATH}/professional/molten_h3x5001.jpg"
    SELECT_ULTIMATE_CL = f"{BASE_PATH}/professional/select_ultimate_cl.jpg"


@dataclass
class HandballBall:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–∞–Ω–¥–±–æ–ª—å–Ω–æ–º –º—è—á–µ"""
    name: str
    level: str
    price: float
    material: str
    size: str
    description: str
    surface_type: str
    image_url: str
    features: List[str]


class MenuBuilder:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""

    @staticmethod
    def get_level_keyboard() -> ReplyKeyboardMarkup:
        keyboard = [
            [KeyboardButton("–ù–æ–≤–∏—á–æ–∫")],
            [KeyboardButton("–°—Ä–µ–¥–Ω–∏–π")],
            [KeyboardButton("–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª")]
        ]
        return ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    @staticmethod
    def get_surface_keyboard() -> ReplyKeyboardMarkup:
        keyboard = [
            [KeyboardButton("–í –∑–∞–ª–µ")],
            [KeyboardButton("–ù–∞ —É–ª–∏—Ü–µ")],
            [KeyboardButton("–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ")]
        ]
        return ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    @staticmethod
    def get_details_keyboard() -> ReplyKeyboardMarkup:
        keyboard = [
            [KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏")],
            [KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ")],
            [KeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å")]
        ]
        return ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)


class BallStats:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""

    def __init__(self):
        self.level_stats = {
            '–ù–æ–≤–∏—á–æ–∫': 0,
            '–°—Ä–µ–¥–Ω–∏–π': 0,
            '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª': 0
        }
        self.surface_stats = {
            '–í –∑–∞–ª–µ': 0,
            '–ù–∞ —É–ª–∏—Ü–µ': 0,
            '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ': 0
        }
        self.total_requests = 0

    def update_stats(self, level: str, surface: str):
        self.level_stats[level] = self.level_stats.get(level, 0) + 1
        self.surface_stats[surface] = self.surface_stats.get(surface, 0) + 1
        self.total_requests += 1

    def get_stats_message(self) -> str:
        if self.total_requests == 0:
            return "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

        message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤:\n\n"
        message += "–ü–æ —É—Ä–æ–≤–Ω—é –∏–≥—Ä—ã:\n"
        for level, count in self.level_stats.items():
            percentage = (count / self.total_requests * 100)
            message += f"- {level}: {count} ({percentage:.1f}%)\n"

        message += "\n–ü–æ —Ç–∏–ø—É –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏:\n"
        for surface, count in self.surface_stats.items():
            percentage = (count / self.total_requests * 100)
            message += f"- {surface}: {count} ({percentage:.1f}%)\n"

        return message